
        横向扩展，任何服务器领域的思路，负载均衡，主从读写分离
        web服务器，游戏服务器，db服务器，redis服务器等
//======//======//======//======//======//======//======//======//=====
    1.字段设计：尽量使用整数字符串
        eg:ip->varchar(15)改为int unsigned,ip地址能转换为无符号整数；（4个字节）
        mysql等觉大多数语言类库都提供了ip和int转换的函数：inet_aton/inet_ntoa()..a:address,n:num；
        而且int的index比varchar的index检索速度快；
        弊端在于转换函数转化，看取舍，磁盘空间最廉价；
        mysql枚举，字符串存为整数：gender enum(男，女，保密)
                    insert into user (gender) values(女)2
                    枚举不好扩充（gender人妖）
                    alter table modify column gender
                    替代方案：中间表比较小更新容易维护
        mysql set类型，但是少用维护成本高，
    2.金额：用定点数，不用浮点数（近似值）。decimal(10,2),两位小数定点数；
            int/bigint.单位用分/厘不用元；
            二进制小数无法完全转换，肯定会丢失，只能取近似值
            decimal的长度 > long/bigint
    3.定长数据类型和变长数据类型：看在乎的是（存储空间/运算效率）还是精度
    4.varchar,char,text：
        长度都是有限；
        text类型独立存储，不占用字段总空间，varchar占。字段总空间是有限，默认65535byte
        varchar运算效率>text，不要再去别的存储空间找数据
    5.进可能选择小的存储字段；
        null用0，tinyint，not null defualt 0；
        尽可能使用not null，null参与的运算返回值都是null，只能用is not null；
        null会在每条记录是否为null，位运算；
        数据有null很容易索引失效，有多条null时候
    6.单张表字段不超过30个，很容易单一业务仅仅使用一部分字段。

====//======//======//======//======//======//======//======//======//=====
        表设计
    1.多对多要中间表。两组一对多关系。一条记录字段较多，分布多个表存储。
    2.常用字段和不常用字段得垂直拆，（姓名，年龄）/（籍贯，婚否）
    3.不需要太了解，只是设计表的一个理论抽象
        1NF:字段原子性，关系型数据库天生就符合。电话与家庭电话个人/拼团时间与开始结束时间范式的例子
        2NF:消除对主键的部分依赖
            主键：可以唯一标示记录的字段或字段集合
            主键是复合主键才有部分依赖，主键的设计是单列字段就行。
        3NF:消除对主键的传递依赖；
            c字段依赖b字段，b字段依赖主键
            将独立字段单独建表，使用关联字段存储
            要建立与业务逻辑无关的主键
        满足三范式，减少冗余，易于维护更新
====//======//======//======//======//======//======//======//======//=====

    联合索引与失效条件，索引
    1.少用select* 用selelct table.field（index）

====//======//======//======//======//======//======//======//======//=====

    存储引擎MySAM InnoDB
    1.就mysql有过这问题，oracle，sqlserver没有
    2.version5.6以后这个选择就不是问题了，都用InnoDB
    3.存储引擎就是文件系统的不同实现。
    4.比较：
        a:MyISAM数据和索引分别存储，数据.myd，索引.myi
          Innodb数据索引集中存储.ibd
        b.记录顺序：MyISAM插入顺序，Innodb主键顺序。select * 可以看到
           所以MyISAM插入效率高于Innodb；
           但是MyISAM的删除会产生空间碎片，要时不时整理：Optimize table；.myd文件还是那么大
        c.事务，外键约束，快照点（savePointer），innodb都支持。
        d.5.7之后Innodb也支持全文检索但不支持中文。
    5.骚操作：mysql也有缓存，flush table tableName,将缓存刷到磁盘

====//======//======//======//======//======//======//======//======//=====
    锁！！：
